openapi: 3.0.0
info:
  version: 1.0.0
  title: Spotifeel
  description: 'API for retrieving playlists based on emotions'
servers:
  - description: Local server
    url: http://localhost:8888
security:
  - BearerAuth: []
paths:
  /feelings:
    get:
      summary: Retrieve all emotions
      description: Retrieves a list of all emotions supported by the API
      responses:
        '200':
          description: List of all emotions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Emotions'

  /feelings/{emotionId}:
    get:
      summary: Retrieve emotion by ID
      description: Retrieves a specific emotion based on its ID
      parameters:
        - name: emotionId
          in: path
          required: true
          description: 'ID for emotions: 1=furious, 2=frustrated, 3=horrified, 4=disappointed, 5=euphoric, 6=loving, 7=happy, 8=useless, 9=regretful, 10=dejected, 11=unhappy, 12=scared, 13=anxious'
          schema:
            type: integer
            minimum: 1
            maximum: 13
      responses:
        '200':
          description: Emotion found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Emotion'
        '404':
          description: Emotion with the specified ID does not exist

  /playlist/{emotionId}/add:
    post:
      security:
        - BearerAuth: []
      summary: Create a playlist based on emotion
      description: Creates a new playlist based on the user's emotion and returns the created playlist
      parameters:
        - name: emotionId
          in: path
          required: true
          description: 'ID for emotions: 1=furious, 2=frustrated, 3=horrified, 4=disappointed, 5=euphoric, 6=loving, 7=happy, 8=useless, 9=regretful, 10=dejected, 11=unhappy, 12=scared, 13=anxious'
          schema:
            type: integer
            minimum: 1
            maximum: 13
      responses:
        '200':
          description: Playlist created and found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '401':
          description: User must be logged in to create a playlist
        '404':
          description: Emotion with the specified ID does not exist

  /playlists:
    get:
      summary: Retrieve all created playlists
      description: Returns all playlist in a list with their ID and URI if there is any playlists created.
      responses:
        '200':
          description: List of all playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist_list_item'

  /playlists/{id}:
    get:
      summary: Retrieve a specific playlist
      description: Returns a single playlist based on the ID.
      parameters:
        - name: search_id
          in: path
          required: true
      responses:
        '200':
          description: List of all playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
                  


components:
  schemas:
    Emotions:
      type: object
      properties:
        emotions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              description:
                type: string
            example:
              id: 1
              description: "Happy"

    Emotion:
      type: object
      properties:
        description:
          type: string
    
    Playlist:
      type: object
      properties:
        name:
          type: string
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        spotifyUrl:
          type: string
          description: URL to the playlist on Spotify
    
    Song:
      type: object
      properties:
        artist:
          type: string
        name:
          type: string
        uri: 
          type: string

    Playlist_list_item:
      type: object
      properties:
        id:
          type: integer
        URI:
          type: string
